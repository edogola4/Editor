version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: collab-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-collaborative_editor}
      POSTGRES_USER: ${DB_USER:-editor_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-editor_pass123}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-editor_user} -d ${DB_NAME:-collaborative_editor}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # Cache & Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: collab-redis-prod
    volumes:
      - redis_data_prod:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: collab-api-prod
    environment:
      - NODE_ENV=production
      - PORT=${PORT:-5000}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-collaborative_editor}
      - DB_USER=${DB_USER:-editor_user}
      - DB_PASSWORD=${DB_PASSWORD:-editor_pass123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: collab-client-prod
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${REACT_APP_API_URL:-/api}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-/socket.io}
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - app-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: collab-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
      - client
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
