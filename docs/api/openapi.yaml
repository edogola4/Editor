openapi: 3.0.0
info:
  title: Collaborative Editor API
  description: |
    Real-time collaborative editing API with operational transform support.
    
    ## Authentication
    
    Most endpoints require authentication using a JWT token.
    Include the token in the `Authorization` header:
    
    ```
    Authorization: Bearer <your-token>
    ```
    
    ## WebSocket Connection
    
    Connect to `wss://your-domain.com/socket.io` with the following query parameters:
    - `token`: Your JWT token
    - `documentId`: The ID of the document to collaborate on
  version: 1.0.0
  contact:
    name: API Support
    email: support@collabeditor.com

servers:
  - url: https://api.collabeditor.com/v1
    description: Production server
  - url: http://localhost:3000/api/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the document
        name:
          type: string
          description: Name of the document
        content:
          type: string
          description: Current content of the document
        version:
          type: integer
          format: int64
          description: Current version of the document
        language:
          type: string
          description: Programming language of the document
        isPublic:
          type: boolean
          description: Whether the document is publicly accessible
        ownerId:
          type: string
          format: uuid
          description: ID of the document owner
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Operation:
      type: object
      properties:
        type:
          type: string
          enum: [insert, delete, retain]
        text:
          type: string
          description: Text to insert (for insert operations)
        pos:
          type: integer
          description: Position in the document
        length:
          type: integer
          description: Number of characters to delete (for delete operations)
    
    CursorPosition:
      type: object
      properties:
        row:
          type: integer
          minimum: 0
        column:
          type: integer
          minimum: 0
    
    SelectionRange:
      type: object
      properties:
        start:
          $ref: '#/components/schemas/CursorPosition'
        end:
          $ref: '#/components/schemas/CursorPosition'
        isBackward:
          type: boolean
          default: false
    
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details

paths:
  /documents:
    get:
      summary: List documents
      description: Get a list of documents accessible by the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
    
    post:
      summary: Create a new document
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                content:
                  type: string
                language:
                  type: string
                isPublic:
                  type: boolean
      responses:
        '201':
          description: Document created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
  
  /documents/{documentId}:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get document by ID
      responses:
        '200':
          description: Document found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    
    put:
      summary: Update document
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                content:
                  type: string
                language:
                  type: string
      responses:
        '200':
          description: Document updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    
    delete:
      summary: Delete document
      responses:
        '204':
          description: Document deleted
  
  /documents/{documentId}/collaborate:
    websocket:
      summary: Real-time collaboration
      description: |
        WebSocket endpoint for real-time collaboration.
        
        ### Events
        
        #### Client to Server:
        - `authenticate`: { token: string, documentId: string }
        - `operation`: { operation: Operation[], version: number }
        - `cursor:update`: { cursor: CursorPosition, selection: SelectionRange }
        - `document:language`: { language: string }
        - `document:theme`: { theme: string }
        
        #### Server to Client:
        - `document:state`: { content: string, version: number, users: UserState[] }
        - `operation`: { operation: Operation[], version: number, userId: string }
        - `cursor:update`: { userId: string, cursor: CursorPosition, selection: SelectionRange }
        - `user:joined`: { userId: string, username: string, color: string }
        - `user:left`: { userId: string }
        - `error`: { message: string }
      
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      
      x-handler: wsDocumentCollaboration

  /auth/me:
    get:
      summary: Get current user info
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  username:
                    type: string
                  email:
                    type: string
                    format: email
